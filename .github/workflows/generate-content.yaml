name: üéì Daily Course Generator
on:
  workflow_dispatch:  # Manual trigger with a nice UI button
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual content generation'
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

permissions:
  contents: write  # Changed to write since we'll be generating content
  pull-requests: write

jobs:
  generate-content:
    name: üìö Generate Course Content
    runs-on: ubuntu-latest
    steps:
      - name: üîç Checkout Main Repository
        uses: actions/checkout@v3
        
      - name: üîê Checkout Private Content Repo
        uses: actions/checkout@v3
        with:
          repository: infoyouth/course-content-action
          ref: main
          token: ${{ secrets.PAT_TOKEN }}
          path: .github/course-generator

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'  # Enables caching of pip dependencies
          node-version: '20'  # Ensure Node.js 20

      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install transformers markdownify torch requests

      - name: üöÄ Generate Course Content
        working-directory: .github/course-generator
        run: |
          set -x
          echo "üéØ Starting content generation process..."
          chmod a+x *.py
          python3 todays_course_finder.py || echo "Failed to run the Python script"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  
      # Step 2: Check status of content generation process
      - name: üìã Process Status
        if: always()  # This will run even if the previous steps fail
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Content generation completed successfully!"
            # List the generated *.md file(s)
            GENERATED_FILE=$(ls .github/course-generator/*.md)
            echo "Generated file: $GENERATED_FILE"
            echo "MARKDOWN_FILENAME=${GENERATED_FILE}" >> $GITHUB_ENV
          else
            echo "‚ùå Content generation encountered issues"
            exit 1
          fi

      # Step 3: Set up branch name and current datetime for the PR
      - name: Set up branch and datetime
        run: |
          CURRENT_DATETIME=$(date '+%Y-%m-%d')
          BRANCH_NAME="topic-update-${CURRENT_DATETIME}"
          echo "CURRENT_DATETIME=${CURRENT_DATETIME}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

      # Step 5: Commit and Push Changes to New Branch
      - name: Commit changes
        run: |
          git config --global user.name "Youth Innovations"
          git config --global user.email "info.youthinno@gmail.com"
          git checkout -b ${{ env.BRANCH_NAME }}
          git add .
          git commit -m "‚ú® Tutorials generated and file created: ${{ env.MARKDOWN_FILENAME }} on ${{ env.CURRENT_DATETIME }} üìù"
          git push origin ${{ env.BRANCH_NAME }}

      # Step 6: Create Pull Request using GitHub API
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          title: "Notes generated for ${{ env.MARKDOWN_FILENAME }} on ${{ env.CURRENT_DATETIME }}"
          body: "This PR contains generated notes on ${{ env.CURRENT_DATETIME }}."
          base: main
          branch: ${{ env.BRANCH_NAME }}
          commit-message: "Tutorials generated and file created ${{ env.MARKDOWN_FILENAME }} on ${{ env.CURRENT_DATETIME }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          node-version: '20'
